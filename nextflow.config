/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Required
    reference_asisi = "${projectDir}/assets/chr21_AsiSI_sites.t2t.bed"
    sample_beds = "${projectDir}/data/breaks/*.breakends.bed"
    publish_dir_mode = 'copy'
    output_dir   = "${projectDir}/results"
    help = "assets/reference_genome.fa"

    // bedtools merge parameters
    merge_overlaps = 0
    min_score = 30

    // bedtools intersect parameters
    write_a = false  // Write original entry in A for each overlap
    write_b = true  // Write original entry in B for each overlap
    write_o = false  // Write the number of base pairs of overlap
    merge_dist = 0 // Minimum overalp fraction

    //Count_Intersections
    binsize = 5000


}



// Processes
process {
    withName:MERGE_BREAKENDS {
        container = 'quay.io/biocontainers/bedtools:2.31.1--hf5e1c6e_1'
        conda = "bioconda::bedtools=2.31.1"
        cpus = 1
        memory = '2.GB'
    }
    
    withName:BEDTOOLS_INTERSECT {
        container = 'quay.io/biocontainers/bedtools:2.31.1--hf5e1c6e_1'
        conda = "bioconda::bedtools=2.31.1"
        cpus   = 1
        memory = '2.GB'
    }
    // quay.io/biocontainers/coreutils:9.5 is built on a different architecture and python not installed
    withName:COUNT_INTERSECTIONS {
        //container = 'quay.io/biocontainers/pandas:2.2.1'
        conda = 'conda-forge::biopython=1.81 matplotlib seaborn'
        cpus = 1
        memory = '1.GB'
    }

    withName:COLLATE_STATISTICS {
        //container = 'quay.io/biocontainers/pandas:2.2.1'
        conda = 'conda-forge::biopython=1.81 matplotlib seaborn'
        cpus = 1
        memory = '1.GB'
    }

    withName:COLLECT_STATISTICS {
        //container = 'quay.io/biocontainers/pandas:2.2.1'
        conda = 'conda-forge::biopython=1.81 matplotlib seaborn'
        cpus = 1
        memory = '1.GB'
    }
}

// Profiles
profiles {

    // Local / default execution
    standard {
        docker.enabled = true
        process.executor = 'local'
        conda.enabled = false
    }

    conda {
        process.executor = 'local'
        docker.enabled   = false
        singularity.enabled = false
        conda.enabled    = true
    }

    // HPC cluster
        cluster {
            singularity.enabled = true
            process.executor = 'slurm'
            process.queue    = 'short'
            docker.enabled  = false
            conda.enabled   = false
    }

    // Cloud (AWS batch)
    cloud {
        docker.enabled = true
        conda.enabled   = false
        process.executor = 'awsbatch'
        aws.region       = 'us-west-2'
    }
}

